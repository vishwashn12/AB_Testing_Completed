name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci

      - name: Build backend
        run: |
          echo "Building backend..."
          npm run build:backend

      - name: Build frontend
        run: |
          echo "Building frontend..."
          npm run build:frontend

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          npm run test:backend

      - name: Run Frontend Tests
        run: |
          echo "Running frontend tests..."
          npm run test:frontend

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate backend coverage report
        run: |
          echo "Generating coverage for backend..."
          cd apps/backend
          npm run coverage || npx jest --coverage || echo "Coverage completed"

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linting
        run: |
          echo "Running linting for all apps..."
          npm run lint

      - name: Save lint reports
        if: always()
        run: |
          mkdir -p lint-report
          cd apps/backend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/backend-lint.html 2>/dev/null || echo "Backend lint report done"
          cd ../frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/frontend-lint.html 2>/dev/null || echo "Frontend lint report done"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate

      - name: Run security audit with report
        if: always()
        run: |
          npm audit --json > security-report.json || echo "Security audit completed with issues"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate all reports
        run: |
          # Create reports directory
          mkdir -p reports
          
          # ============================================
          # BACKEND REPORTS
          # ============================================
          echo "Generating backend reports..."
          cd apps/backend
          
          # Backend tests
          npm test || echo "Backend tests completed"
          cp -r test-results ../../reports/backend-test-results 2>/dev/null || echo "No backend test results"
          cp junit.xml ../../reports/ 2>/dev/null || echo "No junit.xml"
          
          # Backend coverage
          npm run coverage || npx jest --coverage || echo "Coverage completed"
          cp -r coverage ../../reports/backend-coverage 2>/dev/null || echo "No coverage directory"
          cp lcov.info ../../reports/backend-lcov.info 2>/dev/null || echo "No lcov.info"
          
          cd ../..
          
          # ============================================
          # FRONTEND REPORTS
          # ============================================
          echo "Generating frontend reports..."
          cd apps/frontend
          
          # Frontend tests & coverage
          npm run coverage || echo "Frontend coverage completed"
          cp -r test-results ../../reports/frontend-test-results 2>/dev/null || echo "No frontend test results"
          cp -r coverage ../../reports/frontend-coverage 2>/dev/null || echo "No frontend coverage directory"
          
          cd ../..
          
          # ============================================
          # LINT REPORTS
          # ============================================
          echo "Generating lint reports..."
          mkdir -p reports/lint-report
          
          cd apps/backend
          npx eslint . --ext .js -f html -o ../../reports/lint-report/backend-eslint.html 2>/dev/null || echo "Backend lint report generated"
          
          cd ../frontend
          npx eslint . --ext .js,.jsx -f html -o ../../reports/lint-report/frontend-eslint.html 2>/dev/null || echo "Frontend lint report generated"
          
          cd ../..
          
          # ============================================
          # SECURITY REPORT
          # ============================================
          echo "Generating security report..."
          npm audit --json > reports/security-report.json || echo "Security audit completed"

      - name: Create source code artifact
        run: |
          echo "Creating source code package..."
          
          # Copy entire repository including workflows
          rsync -av --progress \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'reports' \
            --exclude '*.zip' \
            ./ source-code/
          
          # Create zip
          zip -r source-code-${{ github.run_id }}.zip source-code
          
          echo "âœ“ Source code package created!"
          ls -lh source-code-${{ github.run_id }}.zip

      - name: Create reports artifact
        run: |
          echo "Organizing CI/CD reports..."
          mkdir -p ci-reports/backend ci-reports/frontend
          
          # ============================================
          # BACKEND REPORTS
          # ============================================
          echo "Organizing backend reports..."
          
          # Test results
          if [ -d "reports/backend-test-results" ]; then
            cp -r reports/backend-test-results ci-reports/backend/test-results
          fi
          
          # Coverage
          if [ -d "reports/backend-coverage" ]; then
            cp -r reports/backend-coverage ci-reports/backend/coverage
          fi
          if [ -f "reports/backend-lcov.info" ]; then
            cp reports/backend-lcov.info ci-reports/backend/lcov.info
          fi
          
          # Lint
          if [ -f "reports/lint-report/backend-eslint.html" ]; then
            mkdir -p ci-reports/backend/lint
            cp reports/lint-report/backend-eslint.html ci-reports/backend/lint/report.html
          fi
          
          # ============================================
          # FRONTEND REPORTS
          # ============================================
          echo "Organizing frontend reports..."
          
          # Test results
          if [ -d "reports/frontend-test-results" ]; then
            cp -r reports/frontend-test-results ci-reports/frontend/test-results
          fi
          
          # Coverage
          if [ -d "reports/frontend-coverage" ]; then
            cp -r reports/frontend-coverage ci-reports/frontend/coverage
          fi
          
          # Lint
          if [ -f "reports/lint-report/frontend-eslint.html" ]; then
            mkdir -p ci-reports/frontend/lint
            cp reports/lint-report/frontend-eslint.html ci-reports/frontend/lint/report.html
          fi
          
          # ============================================
          # SECURITY REPORT
          # ============================================
          if [ -f "reports/security-report.json" ]; then
            cp reports/security-report.json ci-reports/security-report.json
          fi
          
          # Create summary
          cat > ci-reports/README.md << 'EOF'
          # CI/CD Reports
          
          ## Backend Reports
          - **Test Results**: `backend/test-results/junit.xml`
          - **Code Coverage**: `backend/coverage/lcov-report/index.html`
          - **Lint Report**: `backend/lint/report.html`
          
          ## Frontend Reports
          - **Test Results**: `frontend/test-results/junit.xml`
          - **Code Coverage**: `frontend/coverage/index.html`
          - **Lint Report**: `frontend/lint/report.html`
          
          ## Security
          - **Audit Report**: `security-report.json`
          EOF
          
          # Create zip
          zip -r ci-reports-${{ github.run_id }}.zip ci-reports
          
          echo "âœ“ Reports package created!"
          ls -lh ci-reports-${{ github.run_id }}.zip

      - name: Upload source code artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: source-code-*.zip
          retention-days: 90

      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports
          path: ci-reports-*.zip
          retention-days: 90