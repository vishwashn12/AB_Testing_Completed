name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          echo "Installing backend dependencies..."
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          cd frontend
          npm install

      - name: Build backend
        run: |
          echo "Building backend..."
          cd backend
          npm run build --if-present

      - name: Build frontend
        run: |
          echo "Building frontend..."
          cd frontend
          npm run build

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          cd backend
          npm test

      - name: Run Frontend Tests
        run: |
          echo "Running frontend tests..."
          cd frontend
          npm test --if-present

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Generate backend coverage report
        run: |
          echo "Generating coverage for backend..."
          cd backend
          npm run test:coverage --if-present || npm test --if-present || echo "No test coverage script"

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd backend
          npm install
          cd ../frontend
          npm install

      - name: Run Backend Linting
        run: |
          echo "Running linting for backend..."
          cd backend
          npm run lint --if-present || echo "No lint script found"

      - name: Run Frontend Linting
        run: |
          echo "Running linting for frontend..."
          cd frontend
          npm run lint --if-present || echo "No lint script found"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run backend npm audit
        run: |
          echo "Running npm audit on backend..."
          cd backend
          npm audit --audit-level moderate || echo "Backend audit completed"

      - name: Run frontend npm audit
        run: |
          echo "Running npm audit on frontend..."
          cd frontend
          npm audit --audit-level moderate || echo "Frontend audit completed"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build backend
        run: |
          cd backend
          npm run build --if-present || echo "No build script"

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Generate reports
        run: |
          mkdir -p reports
          echo "Backend and Frontend built successfully" > reports/build-status.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist
            frontend/dist
            reports

      - name: Deployment summary
        run: |
          echo "âœ… Build and deployment artifacts created successfully"
          echo "ðŸ“¦ Backend built"
          echo "ðŸ“¦ Frontend built"